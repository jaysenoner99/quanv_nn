from torchvision import datasets, transforms
from quanv_layer import quanv_layer
import matplotlib.pyplot as plt

# Load one image from MNIST
transform = transforms.Compose([transforms.ToTensor()])
mnist_dataset = datasets.MNIST(
    root="./data", train=True, download=True, transform=transform
)
original_image, label = mnist_dataset[0]  # Get the first image (a '5')

# Process the image through the quantum layer
print("Processing image through the quanv layer...")
quanv_features = quanv_layer(original_image.unsqueeze(0))  # Add a batch dimension
print("Processing complete.")

# --- Visualization ---
fig, axs = plt.subplots(1, 5, figsize=(20, 4))

# Plot Original Image
axs[0].imshow(original_image.squeeze(), cmap="gray")
axs[0].set_title(f"Original Image (Label: {label})")
axs[0].axis("off")

# Plot the 4 feature maps generated by the quantum layer
for i in range(4):
    feature_map = quanv_features[:, :, i].detach().numpy()
    axs[i + 1].imshow(feature_map, cmap="viridis")
    axs[i + 1].set_title(f"Quantum Feature Map {i + 1}")
    axs[i + 1].axis("off")

plt.suptitle("Comparison of Original Image and Quantum Features")
plt.tight_layout()
plt.show()
plt.savefig("./images/quantum_features_visualization.png")
print("Saved visualization to quantum_features_visualization.png")
